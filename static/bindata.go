// Code generated by go-bindata.
// sources:
// tmpl/doc.md.tmpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDocMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x3c\xc9\x07\xe0\xd0\xfc\x00\x6e\x88\x5d\x04\x07\x50\xb5\xac\xb8\xac\x90\xe2\xad\xa7\x8d\x51\x6a\x07\x7b\xca\x87\x9a\xfc\x77\x64\x4f\x0b\x8e\xaa\x72\x80\x4d\x4f\x33\x2f\x33\xf3\xe6\x8d\x5f\x35\x5e\xad\xdf\xc1\x86\x8d\x52\xf7\x9d\x4b\x70\xe9\x0c\x1c\xf6\xe4\xd9\xb0\x0b\x1e\xdb\x10\x71\x3c\xa2\xf9\x60\xf6\x84\x69\x6a\x70\x2e\xdd\x91\xa7\x68\x98\x2c\x1e\x7f\xa2\xed\x98\x07\x1b\x36\x6d\x83\x9b\xe0\x9f\x31\xc8\x3a\xce\x1f\x3a\xe3\x6d\xa3\x94\xd6\xb8\x37\x8f\x3d\x21\x6c\xb1\x09\x9e\xc9\x73\x52\xea\x78\x44\x34\x7e\x47\x68\x6e\x3d\x47\x47\x09\xab\x69\x52\x2b\x3c\x3c\x64\xc6\x3b\x4a\x43\xf0\x89\x3e\xb2\xe1\x43\x7a\x1d\x6c\xe6\xff\x5c\x96\x79\x4f\xdc\x05\x8b\x69\x2a\xd9\xda\x70\x97\x3f\x3d\xd7\x57\xdb\x56\x55\xd7\x88\x3e\x7c\xa7\x78\x46\x4b\xf7\x88\xc4\xd1\x0d\xa9\x37\xa9\xab\x0a\x5e\xe4\x15\xc9\x67\xa6\x6b\xdb\x6a\x8d\x7f\xda\xb6\xcc\x6b\x6e\x28\x6d\xa2\x1b\xca\xa5\x33\xa6\xb5\xc6\x1d\x7d\x3d\x50\xe2\x52\xe0\xb6\x79\x72\xc9\xd7\x26\x9a\xbd\x70\x96\x90\x98\x62\x52\x6a\x44\x79\x19\x8c\xf8\x64\xfa\x43\x09\xea\xa1\xa3\x1a\xb1\xca\x3f\x8c\x78\x39\x0f\x24\xa9\x64\x5d\x12\x8d\xf5\xd3\x43\x32\xa1\xf9\x9d\xce\x15\xc8\x3c\xb9\xd8\xfc\x74\x95\x92\xb7\x64\x2c\x45\x61\x38\xc5\x4b\xe8\xa8\x69\xfe\x4b\x88\xba\xaa\xe4\x8d\xa3\xde\x0a\xc3\x09\xc1\xb6\x40\x4b\xe8\xa9\xc8\x16\x92\x73\xfb\xc3\xec\x87\x9e\x66\x7a\x48\x30\xa5\xda\xb6\xfd\x62\xbe\x19\x99\xaa\xc4\xf2\xb3\xae\x69\xca\x35\xf5\x74\x71\xb3\xfc\x2f\x2a\x2e\x01\x96\x77\xc1\x25\xcf\xd3\xdf\x4d\x38\x66\x3e\x10\x68\x19\x23\x5c\xd0\x2d\xa5\x68\x6e\x85\x93\xa4\xbf\x7a\x61\xde\x77\x61\x86\x3f\xd1\xaf\x00\x00\x00\xff\xff\x4f\x15\x64\x45\x77\x06\x00\x00")

func tmplDocMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDocMdTmpl,
		"tmpl/doc.md.tmpl",
	)
}

func tmplDocMdTmpl() (*asset, error) {
	bytes, err := tmplDocMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/doc.md.tmpl", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1496778555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/doc.md.tmpl": tmplDocMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"doc.md.tmpl": &bintree{tmplDocMdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

