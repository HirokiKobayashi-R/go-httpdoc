// Code generated by go-bindata.
// sources:
// tmpl/api-blueprint.tmpl
// tmpl/doc.md.tmpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplApiBlueprintTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3d\x4f\xc3\x30\x10\x86\xf7\xfc\x8a\x93\xb2\xb4\xaa\x1a\x76\x36\x3e\x8a\x60\x00\x55\x20\xb1\x1f\xf5\x4b\x31\x4a\x6c\x63\x3b\x12\x28\xca\x7f\x47\x89\xdd\xc6\x4d\xca\xc7\xd0\x2d\xe7\x3c\xf7\xde\x73\x97\xd3\xc5\xfa\x2e\xcb\xf2\x9c\x9a\x86\x8a\x07\xae\x40\x6d\x9b\x65\x4d\x43\x96\xd5\x16\x54\xac\x94\xb7\x12\x8e\x96\xdd\x73\x1e\xb9\x6b\xb8\x8d\x95\xc6\x4b\xad\xa8\x6d\xfb\xa7\x7b\xf8\x37\x2d\x76\xcd\xf2\x95\x8a\x47\x7c\xd4\x70\xfe\x46\xa2\x14\xa1\x7f\x48\x9d\xfe\x5b\xa4\x02\x34\x73\xde\x4a\xb5\x9d\xd3\xf2\xc8\xbc\x2e\x07\x4a\x1c\x7e\x8d\xa6\xae\xd9\x72\xb5\x4b\xee\x0b\x78\x58\x37\x55\x48\x40\xa2\x91\x84\xaa\xab\x17\xd8\xbf\x24\x12\x87\x05\xc5\x54\x9a\xb1\x31\xa5\xdc\x70\x47\x9f\xbd\x3b\xad\xe6\x23\xc1\x5b\xb0\x80\x1d\x06\xc7\x7a\x2a\x78\x08\x52\x6a\x78\xde\x17\xcf\x5c\xd6\xf8\xe9\x2c\x5d\xf4\xa5\x16\x5f\xfb\xd6\x98\xba\xfa\xe4\xca\x94\xd8\x5b\x3b\xa3\x95\x43\x24\x42\xf1\xe4\xd9\xd7\xee\x4a\x8b\x70\x8c\x5f\x16\x0a\xfc\x7f\x36\x3a\x46\x9e\x60\xa5\x10\x9b\xee\x34\xe0\xdf\x01\x00\x00\xff\xff\x6d\xf2\xb7\x0d\xe2\x02\x00\x00")

func tmplApiBlueprintTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplApiBlueprintTmpl,
		"tmpl/api-blueprint.tmpl",
	)
}

func tmplApiBlueprintTmpl() (*asset, error) {
	bytes, err := tmplApiBlueprintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/api-blueprint.tmpl", size: 738, mode: os.FileMode(420), modTime: time.Unix(1496893135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplDocMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xc1\x6e\xd4\x30\x10\xbd\xcf\x57\x8c\x94\x03\x70\xd8\xf4\x8e\x56\x95\x50\x5b\x04\x07\xd0\xaa\x54\x5c\x2a\xa4\x4c\xe3\xd9\xc6\x90\xd8\xc1\x9e\x40\xab\x4d\xfe\x1d\xd9\xde\xad\x1c\x6d\xf7\x42\x9b\x9c\x66\x9e\xc7\xf3\xde\x9b\x8c\x0b\xfc\xb0\xf9\x8c\xca\xd6\x00\x37\x8d\xf6\xa8\xfd\x01\x18\x3a\x36\x42\xa2\xad\xc1\xad\x75\xb8\xdb\x61\xf9\x95\x3a\xc6\x69\x2a\xf1\x50\x7a\xcf\x86\x1d\x09\x2b\xbc\x7b\xc4\xaa\x11\xe9\x95\xad\xab\x12\x2f\xad\x79\x23\xc8\x4a\x4b\x38\x68\xc8\xa8\x12\xa0\x28\xf0\x86\xee\x5a\x46\xbb\xc5\xda\x1a\x61\x23\x1e\x60\xb7\x43\x47\xe6\x9e\xb1\xbc\x32\xe2\x34\x7b\x5c\x4d\x13\xac\xf0\xf6\x36\x30\x5e\xb3\xef\xad\xf1\xfc\x4d\x48\x06\x7f\x61\x55\xe0\xff\x11\xc5\x7c\x61\x69\xac\xc2\x69\x8a\xd9\x86\xa4\x09\x47\x6f\x8b\x93\xd7\x56\xd9\xad\x11\x5b\xfb\x97\xdd\x01\x8d\xb7\x47\xf4\xe2\x74\xef\x5b\xf2\x4d\x56\xf0\x2e\x48\x64\x13\x98\x4e\xa9\x2d\x0a\xfc\x2f\xb5\xb1\x5f\x79\xc9\xbe\x76\xba\x8f\x93\x0e\x58\x51\x14\x78\xcd\xbf\x07\xf6\x12\x0b\xf4\x36\x74\x8e\xf9\x86\x1c\x75\x89\x33\x86\x2c\xec\x3c\xc0\x88\xf1\xcf\xe0\x88\xdf\xa9\x1d\x62\x90\x37\x1d\x61\xc4\x55\xf8\x70\xc4\xf7\xf3\x20\x25\x99\xad\x63\xa2\x31\xff\xf5\x98\xb2\x44\xf3\x94\xce\x1d\xa4\x7e\x69\x62\xf3\xd1\x65\x4e\x3e\x31\x29\x76\x89\x61\x1f\x2f\xe1\x23\xa7\x79\x91\x11\x38\xe9\xe4\xa3\xe6\x56\x25\x86\x3d\x82\xdb\x08\x2d\xe1\x27\x23\x5b\xc8\xce\xd5\x03\x75\x7d\xcb\x33\x3f\x9c\x30\x80\xb5\x62\x21\xdd\xfa\x73\x58\xfb\xa1\xeb\xc8\x3d\x9e\x5f\xb4\xba\xfe\x85\x62\x91\x1f\x7a\x32\x0a\x6b\xab\xb8\x5c\x9f\x1d\x8e\x01\xaa\xaa\xfa\x49\x7f\x28\x29\x81\xf4\x4c\x66\x4c\xd3\x14\x6a\x00\xd6\x67\x4f\xdd\x33\x75\xe9\x35\xa4\x77\x95\x69\x4d\xc0\xf2\x5b\x74\xcc\xf3\xfa\x73\x4f\x1c\xb3\x3d\x4a\xd0\x32\x8b\x74\x44\xb7\x94\xa3\xf9\x2a\xed\x2d\xbd\xfa\x2e\xcd\xb9\x9e\x59\xa6\x67\xb5\xfe\x0b\x00\x00\xff\xff\x2f\x57\xc7\x87\xf8\x06\x00\x00")

func tmplDocMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDocMdTmpl,
		"tmpl/doc.md.tmpl",
	)
}

func tmplDocMdTmpl() (*asset, error) {
	bytes, err := tmplDocMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/doc.md.tmpl", size: 1784, mode: os.FileMode(420), modTime: time.Unix(1496894277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/api-blueprint.tmpl": tmplApiBlueprintTmpl,
	"tmpl/doc.md.tmpl": tmplDocMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"api-blueprint.tmpl": &bintree{tmplApiBlueprintTmpl, map[string]*bintree{}},
		"doc.md.tmpl": &bintree{tmplDocMdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

